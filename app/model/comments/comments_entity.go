// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package comments

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table rotab_comments.
type Entity struct {
    Id              int         `orm:"id"                json:"id"`                //   
    CreatedAt       *gtime.Time `orm:"created_at"        json:"created_at"`        //   
    UpdatedAt       *gtime.Time `orm:"updated_at"        json:"updated_at"`        //   
    DeletedAt       *gtime.Time `orm:"deleted_at"        json:"deleted_at"`        //   
    ArticleId       int64       `orm:"article_id"        json:"article_id"`        //   
    AuthorId        int64       `orm:"author_id"         json:"author_id"`         //   
    Content         string      `orm:"content"           json:"content"`           //   
    ParentCommentId int64       `orm:"parent_comment_id" json:"parent_comment_id"` //   
    Ip              string      `orm:"ip"                json:"ip"`                //   
    UserAgent       string      `orm:"user_agent"        json:"user_agent"`        //   
    PushedAt        *gtime.Time `orm:"pushed_at"         json:"pushed_at"`         //   
    AuthorName      string      `orm:"author_name"       json:"author_name"`       //   
    AuthorAvatarUrl string      `orm:"author_avatar_url" json:"author_avatar_url"` //   
    AuthorUrl       string      `orm:"author_url"        json:"author_url"`        //   
    BlogId          int64       `orm:"blog_id"           json:"blog_id"`           //   
    AuthorEmail     string      `orm:"author_email"      json:"author_email"`      //   
    Status          string      `orm:"status"            json:"status"`            //   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}